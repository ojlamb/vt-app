{
  "_args": [
    [
      "kdbush@https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
      "/Users/owenlamb/Desktop/vt-app/node_modules/mapbox-gl/node_modules/supercluster"
    ]
  ],
  "_from": "kdbush@>=1.0.0 <2.0.0",
  "_id": "kdbush@1.0.0",
  "_inCache": true,
  "_location": "/mapbox-gl/supercluster/kdbush",
  "_phantomChildren": {},
  "_requested": {
    "name": "kdbush",
    "raw": "kdbush@https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/mapbox-gl/supercluster"
  ],
  "_resolved": "https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
  "_shasum": "d8e629fde90a6bcf6e1b54bc73c30cb2cbf71013",
  "_shrinkwrap": null,
  "_spec": "kdbush@https://registry.npmjs.org/kdbush/-/kdbush-1.0.0.tgz",
  "_where": "/Users/owenlamb/Desktop/vt-app/node_modules/mapbox-gl/node_modules/supercluster",
  "author": {
    "name": "Vladimir Agafonkin"
  },
  "dependencies": {
    "tape": "^4.5.1"
  },
  "description": "A very fast static 2D index for points based on kd-tree.",
  "devDependencies": {
    "eslint": "^2.7.0",
    "eslint-config-mourner": "^2.0.0"
  },
  "eslintConfig": {
    "extends": "mourner"
  },
  "keywords": [
    "index",
    "points",
    "kd-tree",
    "data structures",
    "algorithms",
    "spatial",
    "geometry"
  ],
  "license": "ISC",
  "main": "src/kdbush.js",
  "name": "kdbush",
  "optionalDependencies": {},
  "readme": "## kdbush [![Build Status](https://travis-ci.org/mourner/kdbush.svg?branch=master)](https://travis-ci.org/mourner/kdbush) [![Simply Awesome](https://img.shields.io/badge/simply-awesome-brightgreen.svg)](https://github.com/mourner/projects)\n\nA very fast static spatial index for 2D points based on a flat KD-tree.\nCompared to [RBush](https://github.com/mourner/rbush):\n\n- points only — no rectangles\n- static — you can't add/remove items\n- indexing is 5-8 times faster\n\n```js\nvar index = kdbush(points);              // make an index\nvar ids1 = index.range(10, 10, 20, 20);  // bbox search - minX, minY, maxX, maxY\nvar ids2 = index.within(10, 10, 5);      // radius search - x, y, radius\n```\n\n## API\n\n#### kdbush(points[, getX, getY, nodeSize, arrayType])\n\nCreates an index from the given points.\n\n- `points`: Input array of points.\n- `getX`, `getY`: Functions to get `x` and `y` from an input point. By default, it assumes `[x, y]` format.\n- `nodeSize`: Size of the KD-tree node, `64` by default. Higher means faster indexing but slower search, and vise versa.\n- `arrayType`: Array type to use for storing indices and coordinate values. `Array` by default, but if your coordinates are integer values, `Int32Array` makes things a bit faster.\n\n```js\nvar index = kdbush(points, (p) => p.x, (p) => p.y, 64, Int32Array);\n```\n\n#### range(minX, minY, maxX, maxY)\n\nFinds all items within the given bounding box and returns an array of indices that refer to the items in the original `points` input array.\n\n```js\nvar results = index.range(10, 10, 20, 20).map((id) => points[id]);\n```\n\n#### within(x, y, radius)\n\nFinds all items within a given radius from the query point and returns an array of indices.\n\n```js\nvar results = index.within(10, 10, 5).map((id) => points[id]);\n```\n",
  "readmeFilename": "README.md",
  "scripts": {
    "pretest": "eslint test.js src",
    "test": "tape test.js"
  },
  "version": "1.0.0"
}
