{
  "_args": [
    [
      "bops@https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
      "/Users/owenlamb/Desktop/vt-app/node_modules/mapbox-gl/node_modules/geojson-rewind/node_modules/concat-stream"
    ]
  ],
  "_from": "bops@0.0.6",
  "_id": "bops@0.0.6",
  "_inCache": true,
  "_location": "/mapbox-gl/geojson-rewind/concat-stream/bops",
  "_phantomChildren": {},
  "_requested": {
    "name": "bops",
    "raw": "bops@https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
    "rawSpec": "https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/mapbox-gl/geojson-rewind/concat-stream"
  ],
  "_resolved": "https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
  "_shasum": "082d1d55fa01e60dbdc2ebc2dba37f659554cf3a",
  "_shrinkwrap": null,
  "_spec": "bops@https://registry.npmjs.org/bops/-/bops-0.0.6.tgz",
  "_where": "/Users/owenlamb/Desktop/vt-app/node_modules/mapbox-gl/node_modules/geojson-rewind/node_modules/concat-stream",
  "author": {
    "email": "chris@neversaw.us",
    "name": "Chris Dickinson"
  },
  "browser": {
    "./copy.js": "./typedarray/copy.js",
    "./create.js": "./typedarray/create.js",
    "./from.js": "./typedarray/from.js",
    "./is.js": "./typedarray/is.js",
    "./join.js": "./typedarray/join.js",
    "./mapped.js": "./typedarray/mapped.js",
    "./read.js": "./typedarray/read.js",
    "./subarray.js": "./typedarray/subarray.js",
    "./to.js": "./typedarray/to.js",
    "./write.js": "./typedarray/write.js"
  },
  "bugs": {
    "url": "https://github.com/chrisdickinson/bops/issues"
  },
  "dependencies": {
    "base64-js": "0.0.2",
    "to-utf8": "0.0.1"
  },
  "description": "buffer operations",
  "devDependencies": {
    "tape": "~1.0.1"
  },
  "gitHead": "11f41e69b1ab4507027ac162981913b268445b4a",
  "homepage": "https://github.com/chrisdickinson/bops#readme",
  "keywords": [
    "buffer",
    "operations",
    "binary"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "bops",
  "optionalDependencies": {},
  "readme": "# bops\n\nbuffer/typed array agnostic buffer operations.\n\n```javascript\nvar binary = require('bops')\n\nbinary.readUInt8(new Buffer(10), 0) // === 10\n\n```\n\nin browser, will default to using `Uint8Array` instances.\nin node, will default to using `Buffer` instances.\n\n## API\n\n> ## supported encodings\n> * utf8\n> * hex\n> * base64\n\n#### bops.from(str, encoding=\"utf8\") -> buf\n\ngiven a string (and optional encoding) return a native buffer instance.\nalso accepts arrays.\n\n#### bops.to(buf, encoding=\"utf8\") -> str\n\ngiven a native buffer (and optional encoding) return a string.\n\n#### bops.is(buf) -> bool\n\ngiven a native buffer returns true.  Returns false for other values.\n\n#### bops.subarray(buf, start[, end]) -> buf\n\nreturn a view onto the original buffer.\n\n#### bops.join([buf, buf, buf]) -> buf\n\ncompile several buffers into a single buffer.\n\n#### bops.create(size) -> buf\n\ncreate a native buffer instance of `size`.\n\n#### bops.copy(source, target, target_start, source_start, source_end)\n\nperform a fast copy from one native buffer to another.\n\n#### readUInt8(buf, at)\n#### readInt8(buf, at)\n#### readUInt16LE(buf, at)\n#### readUInt32LE(buf, at)\n#### readInt8(buf, at)\n#### readInt16LE(buf, at)\n#### readInt32LE(buf, at)\n#### readFloatLE(buf, at)\n#### readDoubleLE(buf, at)\n#### readUInt16BE(buf, at)\n#### readUInt32BE(buf, at)\n#### readInt16BE(buf, at)\n#### readInt32BE(buf, at)\n#### readFloatBE(buf, at)\n#### readDoubleBE(buf, at)\n\nread a value from a buffer at a given byte offset.\n\n#### writeUInt8(buf, value, at)\n#### writeInt8(buf, value, at)\n#### writeUInt16LE(buf, value, at)\n#### writeUInt32LE(buf, value, at)\n#### writeInt8(buf, value, at)\n#### writeInt16LE(buf, value, at)\n#### writeInt32LE(buf, value, at)\n#### writeFloatLE(buf, value, at)\n#### writeDoubleLE(buf, value, at)\n#### writeUInt16BE(buf, value, at)\n#### writeUInt32BE(buf, value, at)\n#### writeInt16BE(buf, value, at)\n#### writeInt32BE(buf, value, at)\n#### writeFloatBE(buf, value, at)\n#### writeDoubleBE(buf, value, at)\n\nwrite a value to a buffer at a given byte offset.\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/bops.git"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "testling": {
    "browsers": [
      "ie/6..latest",
      "chrome/20..latest",
      "firefox/10..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6"
    ],
    "files": "test/index.js"
  },
  "version": "0.0.6"
}
